/**
 * http://central.sonatype.org/pages/gradle.html
 */

apply plugin: 'java'
//apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

//apply from: file('gradle/idea.gradle')

sourceCompatibility = 1.5
group = 'me.andrz'

version = '1.0.0'
description = 'Brace expansion from Bash/shell in Java.'
archivesBaseName = "brace-expansion"

// Define these so CI build doesn't fail, but add to "$GRADLE_USER_HOME/gradle.properties".
ext.ossrhUsername = null
ext.ossrhPassword = null

ext.versions = [
        slf4j: "1.7.2",
        logback: "1.0.9",
        junit: "4.10",
        hamcrest: "1.3",
        antlr: "4.0"
]

ext.antlr = [
        grammarpackage: "me.andrz.brace.antlr",
        antlrSource: 'src/main/antlr',
        destinationDir: "src/generated-sources/java"
]

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

dependencies {
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    compile "ch.qos.logback:logback-classic:${versions.logback}"
    compile "org.antlr:antlr4-runtime:${versions.antlr}"
    antlr4 "org.antlr:antlr4:${versions.antlr}"
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

if (System.getenv('CI') != 'true') {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'brace-expansion'
                packaging 'jar'
                artifactId 'brace-expansion'
                description 'Brace expansion from Bash/shell in Java.'
                url 'https://github.com/AndersDJohnson/brace-expansion-java'

                scm {
                    connection 'scm:git:https://github.com/AndersDJohnson/brace-expansion-java.git'
                    developerConnection 'scm:git:git@github.com:AndersDJohnson/brace-expansion-java.git'
                    url 'https://github.com/AndersDJohnson/brace-expansion-java'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'AndersDJohnson'
                        name 'Anders D. Johnson'
                        url 'https://andrz.me'
                        email 'anders.d.johnson.developer@gmail.com'
                    }
                }
            }
        }
    }
}

idea {
    module {
        sourceDirs += file(antlr.destinationDir)
    }
}

//tasks.withType(Compile) {
//    options.encoding = 'UTF-8'
//}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    testLogging.showStandardStreams = true
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()

}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}
